{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","components/RadioSelectors.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","label1","label2","label2a","label2b","label2c","label2d","label3","label4","label5","attribute1","attribute2","attribute2a","attribute2b","attribute2c","attribute2d","attribute3","attribute4","attribute5","radioButton","className","href","target","Cardlist","data","peopleDatabase","planetsDatabase","speciesDatabase","filmsDatabase","convertToIndexedDict","dataBase","arrayOfItems","map","record","url","match","Object","fromEntries","queryDatabase","database","categoricalIndexName","item","itemAttribute","Array","getArrayFromDB","dictionary","search","sort","a","b","parseFloat","speciesDict","planetsDict","charactersDict","filmsDict","length","personSpecies","personHomeWorld","filmsArray","height","mass","key","join","residentsArray","orbital_period","rotation_period","gravity","climate","population","max_atmosphering_speed","crew","passengers","hyperdrive_rating","starship_class","peopleArray","homeWorld","classification","average_lifespan","average_height","skin_colors","eye_colors","vehicle_class","model","filmCharacters","openingCrawl","opening_crawl","title","release_date","director","producer","Searchbox","searchChange","id","min","max","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","RadioSelectors","radioChange","peopleLen","planetsLen","starshipsLen","speciesLen","vehiclesLen","filmsLen","defaultChecked","value","App","onSearchChange","event","searchfield","onRadioChange","people","planets","starships","species","vehicles","films","clearSearchBox","searchbox","document","getElementById","init","urls","Promise","all","fetch","response","ok","Error","statusText","json","dataObject","dataArray","results","whileLoop","_","next","newResponse","newObject","i","push","returnedArray","sortData","items","console","log","nextPage","filteredData","filter","keys","toLowerCase","includes","CardList","starshipsDatabase","vehiclesDatabase","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c44863a9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, label1, label2, label2a, label2b, label2c, label2d, label3, label4, label5, attribute1, attribute2, attribute2a, attribute2b, attribute2c, attribute2d, attribute3, attribute4, attribute5, radioButton}) => {\n    \n    if(!(name && attribute2)){\n        return (\n            <div className=\"cardbg dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n                <div>\n                    <h2>Processing...</h2>\n                    <p>Downloading data from Star Wars API.</p>\n                    <p><a href=\"https://swapi.co\" target=\"blank\">www.swapi.com</a></p>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"cardbg dib br3 pa3 ma2 grow bw2 shadow-5 tl\">\n                <div>\n                    <h2>{name}</h2>\n                    <p className=\"capitalize\">{label1}{attribute1}</p>\n                    <p className=\"capitalize\">{label2}{attribute2}</p>\n                    <p className=\"capitalize\">{label2a}{attribute2a}</p>\n                    <p className=\"capitalize\">{label2b}{attribute2b}</p>\n                    <p className=\"capitalize\">{label2c}{attribute2c}</p>\n                    <p className=\"capitalize\">{label2d}{attribute2d}</p>\n                    <div className=\"films\">\n                        <div>\n                            <p className=\"m-inherit whitespace-nowrap capitalize\">{label3}</p>\n                        </div>\n                        <div className=\"titles\">\n                            <p className=\"m-inherit capitalize\">{attribute3}</p>\n                        </div>\n                    </div>\n\n                    <div className=\"films mt\">\n                        <div>\n                            <p className=\"m-inherit\">{label4}</p>\n                        </div>\n                        <div className=\"titles\">\n                            <p className=\"m-inherit\">{attribute4}</p>\n                        </div>\n                    </div>\n\n                    <div className=\"films mt\">\n                        <div>\n                            <p className=\"m-inherit whitespace-nowrap\">{label5}</p>\n                        </div>\n                        <div className=\"titles\">\n                            <p className=\" i m-inherit\">{attribute5}</p>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        )\n    } \n}\n\nexport default Card; ","import React from \"react\";\nimport Card from \"./Card\";\n\nconst Cardlist = ({ data, radioButton, peopleDatabase, planetsDatabase, speciesDatabase, filmsDatabase }) => {\n    \n    function convertToIndexedDict(dataBase, name=\"name\"){\n        //transforming the API database into a keyed object {urlNumber: Name of Item} // Ex: {1: Human}\n        //Films DB doesn't use \"name\", but \"title\"\n        const arrayOfItems = dataBase.map(record => {\n            const newArray = [record.url.match(/[0-9]+/)[0], record[name]];\n            return newArray;\n        });\n        return Object.fromEntries(arrayOfItems);\n    }\n\n    function queryDatabase(database, categoricalIndexName, item, notFoundValue=\"Unknown\"){\n        let itemAttribute = notFoundValue;\n        let url = \"\";\n\n        //if item.url is a list, vs if item.url is a string\n        if(item[categoricalIndexName] instanceof Array){\n            url = item[categoricalIndexName][0];\n        } else{\n            url = item[categoricalIndexName];\n        }\n\n        if(url){\n            let itemIndex = url.match(/[0-9]+/)[0];\n            itemAttribute = database[itemIndex];\n        } \n        return itemAttribute;\n    }\n\n    function getArrayFromDB(dictionary, item, search){\n        const returnedArray = item[search].map(url => {\n            if(url){\n                return [dictionary[url.match(/[0-9]+/)[0]], url.match(/[0-9]+/)[0]];\n            } else{\n                return \"n/a\";\n            }\n        });\n        \n        //sort array\n        const sorted = returnedArray.sort(function(a, b) {\n            return parseFloat(a[1]) - parseFloat(b[1]);\n        });\n\n        return sorted.map(item => item[0]);\n    }\n\n    //convert the orginal arrays to dicts with proper indexs based number at end of url (swapi.co/person/1/)\n    // (the api indexs for people skip a person)\n    const speciesDict = convertToIndexedDict(speciesDatabase);\n    const planetsDict = convertToIndexedDict(planetsDatabase);\n    const charactersDict = convertToIndexedDict(peopleDatabase);\n    const filmsDict = convertToIndexedDict(filmsDatabase, \"title\");\n\n    if(data.length > 0){\n        return (\n            <div>\n                {                            \n                data.map((item) => {\n                    if(radioButton === \"people\"){\n\n                        const personSpecies = queryDatabase(speciesDict, \"species\", item);\n                        const personHomeWorld = queryDatabase(planetsDict, \"homeworld\", item);\n                        const filmsArray = getArrayFromDB(filmsDict, item, \"films\");\n                        const height = item.height + \" cm\";\n                        const mass = item.mass + \" kg\";\n\n                        return(\n                            <Card key={item.name} name={item.name} \n                            label1={\"Species: \"} attribute1={personSpecies}\n                            label2={\"Home World: \"} attribute2={personHomeWorld}\n                            label2a={\"Height: \"} attribute2a={height}\n                            label3={\"Mass: \"} attribute3={mass}\n                            label4={\"Films: \"} attribute4={filmsArray.join(\", \")}\n                            radioButton={radioButton}\n                            />\n                        )\n                    } else if (radioButton === \"planets\") {\n                        const residentsArray = getArrayFromDB(charactersDict, item, \"residents\");\n                        const filmsArray = getArrayFromDB(filmsDict, item, \"films\");\n                        const orbital_period = item.orbital_period + \" days\";\n                        const rotation_period = item.rotation_period + \" hours\";\n                        return(\n                            <Card key={item.name} name={item.name} \n                            label1={\"Gravity: \"} attribute1={item.gravity}\n                            label2={\"Climate: \"} attribute2={item.climate}\n                            label2a={\"Orbital Period: \"} attribute2a={orbital_period}\n                            label2b={\"Rotation Period: \"} attribute2b={rotation_period}\n                            label2c={\"Population: \"} attribute2c={item.population}\n                            label3={\"Residents: \"} attribute3={residentsArray.join(\", \")}\n                            label4={\"Films: \"} attribute4={filmsArray.join(\", \")}\n                            radioButton={radioButton}\n                            />\n                        )\n                    } else if (radioButton === \"starships\") {\n                        const filmsArray = getArrayFromDB(filmsDict, item, \"films\");\n                        return(\n                            <Card key={item.name} name={item.name} \n                            label1={\"Max Speed: \"} attribute1={item.max_atmosphering_speed}\n                            label2={\"Crew: \"} attribute2={item.crew}\n                            label2a={\"Passengers: \"} attribute2a={item.passengers}\n                            label2b={\"Hyperdrive Rating: \"} attribute2b={item.hyperdrive_rating}\n                            label3={\"Class: \"} attribute3={item.starship_class}\n                            label4={\"Films: \"} attribute4={filmsArray.join(\", \")}\n                            radioButton={radioButton}\n                            />\n                        )\n                    } else if (radioButton === \"species\") {\n\n                        const peopleArray = getArrayFromDB(charactersDict, item, \"people\");\n                        const homeWorld = queryDatabase(planetsDict, \"homeworld\", item, \"n/a\");\n                        const filmsArray = getArrayFromDB(filmsDict, item, \"films\");\n\n                        return(\n                            <Card key={item.name} name={item.name} \n                            label1={\"Classification: \"} attribute1={item.classification}\n                            label2={\"Average Lifespan: \"} attribute2={item.average_lifespan}\n                            label2a={\"Average Height: \"} attribute2a={item.average_height}\n                            label2b={\"Skin Colors: \"} attribute2b={item.skin_colors}\n                            label2c={\"Eye Colors: \"} attribute2c={item.eye_colors}\n                            label2d={\"Home World: \"} attribute2d={homeWorld}\n                            label3={\"People: \"} attribute3={peopleArray.join(\", \")}\n                            label4={\"Films: \"} attribute4={filmsArray.join(\", \")}\n                            radioButton={radioButton}\n                            />\n                        )\n                    } else if (radioButton === \"vehicles\") {\n\n                        const filmsArray = getArrayFromDB(filmsDict, item, \"films\");\n\n                        return(\n                            <Card key={item.name} name={item.name} \n                            label1={\"Class: \"} attribute1={item.vehicle_class}\n                            label2={\"Crew: \"} attribute2={item.crew}\n                            label2a={\"Passengers: \"} attribute2a={item.passengers}\n                            label2b={\"Model: \"} attribute2b={item.model}\n                            label2c={\"Length: \"} attribute2c={item.length}\n                            label3={\"Max Speed: \"} attribute3={item.max_atmosphering_speed}\n                            label4={\"Films: \"} attribute4={filmsArray.join(\", \")}\n                            radioButton={radioButton}\n                            />\n                        )\n                    } else { //radioButton === \"films\"\n\n                        const filmCharacters = getArrayFromDB(charactersDict, item, \"characters\");\n                        const openingCrawl = item.opening_crawl;\n\n                        return (\n                            <Card key={item.title} name={item.title} \n                                label1={\"Release Date: \"} attribute1={item.release_date}\n                                label2={\"Directed by: \"} attribute2={item.director}\n                                label3={\"Produced by: \"} attribute3={item.producer}\n                                label4={\"Characters: \"} attribute4={filmCharacters.join(\", \")}\n                                label5={\"Opening Crawl: \"} attribute5={openingCrawl}\n\n                                radioButton={radioButton}\n                                />\n                        );\n                    }\n                })\n                }\n            </div>\n        );\n    } else {\n            return (\n            <div>\n                {                            \n                    <Card key={data.name} \n                        name={data.name} \n                        />\n                }\n            </div>\n        )};\n}\n\nexport default Cardlist; ","import React from \"react\";\n\nconst Searchbox = ({ searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input \n                id=\"searchbox\"\n                className=\"pa2\" \n                name=\"quantity\" min=\"1\" max=\"200\"\n                type=\"text\" \n                placeholder=\"Filter by Name\" \n                onChange={searchChange}/>\n        </div>\n    );\n}\n\nexport default Searchbox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div className=\"scrollingsongood\" style={{ overflowY: \"scroll\", border: '1px solid black', height: \"600px\" }}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component{\n    constructor(){\n        super();\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Something went wrong.</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React from \"react\";\n\nconst RadioSelectors = ({radioChange, peopleLen, planetsLen, starshipsLen, speciesLen, vehiclesLen, filmsLen}) => {\n    return (\n        <div className=\"\">\n            <label className=\"container\">\n                {peopleLen} People \n                <input type=\"radio\" defaultChecked=\"checked\" name=\"radio\" value=\"people\" onChange={radioChange}/>\n                <span className=\"checkmark\"></span>\n            </label>\n            <label className=\"container\">\n                {planetsLen} Planets\n                <input type=\"radio\" name=\"radio\" value=\"planets\" onChange={radioChange}/>\n                <span className=\"checkmark\"></span>\n            </label>\n            <label className=\"container\">\n                {starshipsLen} Starships\n                <input type=\"radio\" name=\"radio\" value=\"starships\" onChange={radioChange}/>\n                <span className=\"checkmark\"></span>\n            </label>\n            <label className=\"container\">\n                {speciesLen} Species\n                <input type=\"radio\" name=\"radio\" value=\"species\" onChange={radioChange}/>\n                <span className=\"checkmark\"></span>\n            </label>\n            <label className=\"container\">\n                {vehiclesLen} Vehicles\n                <input type=\"radio\" name=\"radio\" value=\"vehicles\" onChange={radioChange}/>\n                <span className=\"checkmark\"></span>\n            </label>\n            <label className=\"container\">\n                {filmsLen} Films\n                <input type=\"radio\" name=\"radio\" value=\"films\" onChange={radioChange} />\n                <span className=\"checkmark\"></span>\n            </label>\n        </div>\n    );\n}\n\nexport default RadioSelectors;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/Searchbox\";\nimport \"./app.css\"\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport RadioSelectors from \"../components/RadioSelectors\";\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            data: [],\n            searchfield: \"\",\n            radioButton: \"people\",\n            people: [],\n            planets: [],\n            starships: [],\n            species: [],\n            vehicles: [],\n            films: [],\n        }\n    }\n\n    async componentDidMount(){\n        this.init();\n    }\n    \n    async init(){   \n        const urls = [\n            'https://swapi.co/api/people/',\n            'https://swapi.co/api/planets/',\n            'https://swapi.co/api/starships/',\n            'https://swapi.co/api/species/',\n            'https://swapi.co/api/vehicles/',\n            'https://swapi.co/api/films/'\n            ]\n            \n        try {\n            const [ people, planets, starships, species, vehicles, films ] = await Promise.all(urls.map(async function(url) {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    throw Error(response.statusText);\n                    }\n                let dataObject = await response.json();\n                let dataArray = dataObject.results;\n                const whileLoop = async _ => {                  \n                    while (dataObject.next) {\n                        const newResponse = await fetch(dataObject.next);\n                        const newObject = await newResponse.json();\n\n                        for(let i = 0; i < newObject.results.length; i++){\n                            dataArray.push(newObject.results[i]);\n                        }\n\n                        dataObject = newObject;\n                    }\n                    return dataArray;\n                  }\n                const returnedArray = await whileLoop();\n                return returnedArray;\n            }));\n\n            const sortData = (items) => {\n                items.sort(function(a, b) {\n                    return parseFloat(a.url.match(/[0-9]+/)[0]) - parseFloat(b.url.match(/[0-9]+/)[0]);\n                });\n                return items;\n            }\n            \n            this.setState({people: sortData(people)});\n            this.setState({planets: sortData(planets)});\n            this.setState({species: sortData(species)});\n            this.setState({starships: sortData(starships)});\n            this.setState({vehicles: sortData(vehicles)});\n            this.setState({films: sortData(films)});\n\n            this.setState({ data: people});\n        } catch (err) {\n            console.log('Error in INIT: ', err);\n        }\n    };\n\n    async deepFetch(url) {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw Error(response.statusText);\n            }\n        const dataObject = await response.json();\n        const nextPage = async function() {\n            if (dataObject.next) {\n            return await fetch(dataObject.next);\n        }}\n        return dataObject.results + nextPage;\n    };\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value});\n    }\n\n    onRadioChange = (event) => {\n        this.setState({ radioButton: event.target.value});\n        switch(event.target.value){\n            case \"people\":\n                this.setState({ data: this.state.people});      \n                break; \n            case \"planets\":\n                this.setState({ data: this.state.planets});      \n                break; \n            case \"starships\":\n                this.setState({ data: this.state.starships});      \n                break; \n            case \"species\":\n                    this.setState({ data: this.state.species});      \n                    break; \n            case \"vehicles\":\n                this.setState({ data: this.state.vehicles});      \n                break; \n            case \"films\":\n                this.setState({ data: this.state.films});      \n                break;                                \n            default:\n                this.setState({ data: this.state.people});      \n        }\n        this.clearSearchBox();\n    }\n\n    clearSearchBox = () => {\n        const searchbox = document.getElementById(\"searchbox\");\n        if(searchbox){\n            searchbox.value = \"\";\n        }\n        this.setState({searchfield: \"\"});\n    }\n    \n    render() {     \n        const filteredData = this.state.data.filter( item => {\n            return item[Object.keys(this.state.data[0])[0]].toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n\n        if(this.state.data.length){\n            return (\n                <div className=\"tc\">\n                    <h1 className=\"f1\">Star Data</h1>\n    \n                    <RadioSelectors radioChange={this.onRadioChange} \n                                    peopleLen={this.state.people.length}\n                                    planetsLen={this.state.planets.length}\n                                    starshipsLen={this.state.starships.length}\n                                    speciesLen={this.state.species.length}\n                                    vehiclesLen={this.state.vehicles.length}\n                                    filmsLen={this.state.films.length}\n                                    />\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList   data={filteredData} \n                                        radioButton={this.state.radioButton}\n                                        peopleDatabase={this.state.people}\n                                        planetsDatabase={this.state.planets}\n                                        starshipsDatabase={this.state.starships}\n                                        speciesDatabase={this.state.species}\n                                        vehiclesDatabase={this.state.vehicles}\n                                        filmsDatabase={this.state.films} />\n                        </ErrorBoundary>  \n                    </Scroll>\n                    <footer>\n                        <p>All data is from <a href=\"https://swapi.co\" target=\"blank\">www.swapi.com</a></p>\n                    </footer>\n                </div>\n            )  \n        } else { \n            return(\n                <div className=\"tc\">\n                    <h1 className=\"f1\">Star Data</h1>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList   data={filteredData} \n                                        radioButton={this.state.radioButton}\n                                        peopleDatabase={this.state.people}\n                                        planetsDatabase={this.state.planets}\n                                        starshipsDatabase={this.state.starships}\n                                        speciesDatabase={this.state.species}\n                                        vehiclesDatabase={this.state.vehicles}\n                                        filmsDatabase={this.state.films} />\n                        </ErrorBoundary>  \n                    </Scroll>\n                </div>\n            )\n\n        }\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}